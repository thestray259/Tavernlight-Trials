// skimming though before making edits, I can see that delete() is not used at all
// this means the memory allocated to variables is not being deallocated, hence the memory leaks
// I also changed the formatting to make it more readable 

void Game::addItemToPlayer(const std::string& recipient, uint16_t itemId)
{
  Player* player = g_game.getPlayerByName(recipient);

  if (!player) 
  {
      player = new Player(nullptr);
      if (!IOLoginData::loadPlayerByName(player, recipient)) 
      {
        return;
      }
  }
  
  Item* item = Item::CreateItem(itemId);
  if (!item) 
  {
    return;
  }
  
  g_game.internalAddItem(player->getInbox(), item, INDEX_WHEREEVER, FLAG_NOLIMIT);
  
  if (player->isOffline()) 
  {
    IOLoginData::savePlayer(player);
  }

  // to avoid memory leaks, deleting the pointers at the end of the method is needed
  // memory is allocated when making new pointers, memory is deallocated by using the delete keyword, code to be written in between
  // delete pointers in reverse order of creation
  delete(item);
  delete(player);
}
